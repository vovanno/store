// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using AppContext = DAL.Context.AppContext;

namespace DAL.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20190605144600_add some fields to game model")]
    partial class addsomefieldstogamemodel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("GameId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("ParentCommentId");

                    b.HasKey("CommentId");

                    b.HasIndex("GameId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DAL.Entities.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountOfViews");

                    b.Property<DateTime>("DateOfAdding");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double>("Price");

                    b.Property<int>("PublisherId");

                    b.HasKey("GameId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("DAL.Entities.GameGenre", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<int>("GenreId");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenres");
                });

            modelBuilder.Entity("DAL.Entities.GamePlatform", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<int>("PlatformTypeId");

                    b.HasKey("GameId", "PlatformTypeId");

                    b.HasIndex("PlatformTypeId");

                    b.ToTable("GamePlatforms");
                });

            modelBuilder.Entity("DAL.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("GenreId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            IsDeleted = false,
                            Name = "Strategy"
                        },
                        new
                        {
                            GenreId = 2,
                            IsDeleted = false,
                            Name = "RPG"
                        },
                        new
                        {
                            GenreId = 3,
                            IsDeleted = false,
                            Name = "Sports"
                        },
                        new
                        {
                            GenreId = 4,
                            IsDeleted = false,
                            Name = "Races"
                        },
                        new
                        {
                            GenreId = 5,
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            GenreId = 6,
                            IsDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            GenreId = 7,
                            IsDeleted = false,
                            Name = "Puzzle & Skills"
                        },
                        new
                        {
                            GenreId = 8,
                            IsDeleted = false,
                            Name = "Misc"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Genre+SubGenre", b =>
                {
                    b.Property<int>("SubGenreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GenreId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("SubGenreId");

                    b.HasIndex("GenreId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubGenre");

                    b.HasData(
                        new
                        {
                            SubGenreId = 1,
                            GenreId = 1,
                            IsDeleted = false,
                            Name = "RTC"
                        },
                        new
                        {
                            SubGenreId = 2,
                            GenreId = 1,
                            IsDeleted = false,
                            Name = "TBS"
                        },
                        new
                        {
                            SubGenreId = 3,
                            GenreId = 4,
                            IsDeleted = false,
                            Name = "Rally"
                        },
                        new
                        {
                            SubGenreId = 4,
                            GenreId = 4,
                            IsDeleted = false,
                            Name = "Arcade"
                        },
                        new
                        {
                            SubGenreId = 5,
                            GenreId = 4,
                            IsDeleted = false,
                            Name = "Formula"
                        },
                        new
                        {
                            SubGenreId = 6,
                            GenreId = 4,
                            IsDeleted = false,
                            Name = "Off-Road"
                        },
                        new
                        {
                            SubGenreId = 7,
                            GenreId = 5,
                            IsDeleted = false,
                            Name = "FPS"
                        },
                        new
                        {
                            SubGenreId = 8,
                            GenreId = 5,
                            IsDeleted = false,
                            Name = "TPS"
                        },
                        new
                        {
                            SubGenreId = 9,
                            GenreId = 5,
                            IsDeleted = false,
                            Name = "Misc"
                        });
                });

            modelBuilder.Entity("DAL.Entities.PlatformType", b =>
                {
                    b.Property<int>("PlatformTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("PlatformTypeId");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("PlatformTypes");
                });

            modelBuilder.Entity("DAL.Entities.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("PublisherId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("DAL.Entities.Comment", b =>
                {
                    b.HasOne("DAL.Entities.Game", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.Game", b =>
                {
                    b.HasOne("DAL.Entities.Publisher", "Publisher")
                        .WithMany("Games")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.GameGenre", b =>
                {
                    b.HasOne("DAL.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.GamePlatform", b =>
                {
                    b.HasOne("DAL.Entities.Game", "Game")
                        .WithMany("PlatformTypes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.PlatformType", "PlatformType")
                        .WithMany("Games")
                        .HasForeignKey("PlatformTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entities.Genre+SubGenre", b =>
                {
                    b.HasOne("DAL.Entities.Genre", "Genre")
                        .WithMany("SubGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
